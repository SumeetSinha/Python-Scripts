#!/usr/bin/env python

"""Reads REAL ESSI HDF5 .feioutput output file.

It reads the output file and has capability to perform 
various manipulations on it.
"""

__author__ = "Sumeet K. Sinha"
__credits__ = [""]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Sumeet K. Sinha"
__email__ = "sumeet.kumar507@gmail.com"

import h5py;
import sys,cStringIO
import ESSInode;
import ESSIelement;
import ESSItime;
import ESSIclass;

class ESSI_Output:
	'It reads the .feioutput file generated by Real-ESSI Simulator'

	FeiOutputFile = None;
	__MainHDF5File   = None;
	NumProcess   = 1;
	NumTimeSteps = 1;
	StageName    = None;
	VersionInfo  = None;
	PreviousStage= None;
	ModelName    = None;
	__Sequential   = True;
	__HDF5_File    = None;
	MaxElementTag= 0;
	MaxNodeTag   = 0;
	OutputMode   = None;

	def __str__(self):
		return "\
\n---------------------------------------\n\
ESSI_Output -> %s\n---------------------------------------\n\t\
ModelName:: %s\n\t\
StageName:: %s\n\t\
PreviousStage:: %s\n\t\
NumTimeSteps:: %s\n\t\
NumProcess:: %s\n\t\
MaxElementTag:: %s\n\t\
MaxNodeTag:: %s\n\t\
OutputMode:: %s\n\t\
" % (self.FeiOutputFile,self.ModelName,self.StageName,\
self.PreviousStage,self.NumTimeSteps,self.NumProcess,\
self.MaxElementTag,self.MaxNodeTag,self.OutputMode)

	def __init__ (self,outputFile):
		""" Define ESSI_Output class with output file

		Class Variables:
		outputFile -- the hdf5.feioutput filename
		HDF5File   -- the hdf5 file object
		"""
		self.FeiOutputFile = outputFile;
		self.__initialize();


	def __initialize(self):
		""" Initializes the variables by getting data from 
		HDF5 output file
		"""
		self.__MainHDF5File   = h5py.File(self.FeiOutputFile, 'r');
		self.__HDF5_File      = self.__MainHDF5File;
		self.NumTimeSteps     = self.__MainHDF5File['Number_of_Time_Steps'][0];
		self.NumProcess       = self.__MainHDF5File['Number_of_Processes_Used'][0];
		self.StageName        = self.__MainHDF5File['Stage_Name'][0];
		self.VersionInfo      = self.__MainHDF5File['Version Info'][0];
		self.PreviousStage    = self.__MainHDF5File['Previous_Stage'][0];
		self.ModelName        = self.__MainHDF5File['Model_Name'][0];
		if(self.NumProcess>1):
			self.__Sequential = False;
			self.MaxElementTag     = len(self.__MainHDF5File['Model/Elements/Partition'])-1; 
			self.MaxNodeTag        = len(self.__MainHDF5File['Model/Nodes/Partition'])-1; 
			self.OutputMode        = "Parallel";
		else:
			self.MaxElementTag     = len(self.__MainHDF5File['/Model/Elements/Index_to_Connectivity'])-1; 
			self.MaxNodeTag        = len(self.__MainHDF5File['/Model/Nodes/Index_to_Coordinates'])-1;
			self.OutputMode        = "Sequential";


	def __getNodeFileName(self, NodeId):
		""" gets the FileName that contains information
		about teh given nodeId
		"""
		FileId = -1;
		Status = 0;

		if(NodeId>self.MaxNodeTag or NodeId<0):
			FileId = -1;
			Status = 0;
		elif(self.__Sequential):
			Status = self.__MainHDF5File['Model/Nodes/Index_to_Coordinates'][NodeId];
			if(Status>=0):
				FileId = 0;
		else:
			Status = self.__MainHDF5File['Model/Nodes/Partition'][NodeId];
			FileId = Status;

		if(FileId==-1):
			print "Node Id " + str(NodeId) + " does not exist";
		elif(FileId==0):
			self.__HDF5_File = self.FeiOutputFile;
		elif(FileId>0):
			self.__HDF5_File = self.FeiOutputFile.split('.feioutput')[0]+'.'+str(FileId)+'.feioutput';

		return FileId;

	def __getElementFileName(self, ElementId):
		""" gets the FileName that contains information
		about the given elementId
		"""

		FileId = -1;
		Status = 0;

		if(ElementId>self.MaxElementTag or ElementId<0):
			FileId = -1;
			Status = 0;
		elif(self.__Sequential):
			Status = self.__MainHDF5File['Model/Elements/Index_to_Connectivity'][ElementId];
			if(Status>=0):
				FileId = 0;
		else:
			Status = self.__MainHDF5File['Model/Elements/Partition'][ElementId];
			FileId = Status;

		if(FileId==-1):
			print "Element Id " + str(ElementId) + " does not exist";
		elif(FileId==0):
			self.__HDF5_File = self.FeiOutputFile;
		elif(FileId>0):
			self.__HDF5_File = self.FeiOutputFile.split('.feioutput')[0]+'.'+str(FileId)+'.feioutput';

		return FileId;


	def Node(self,NodeId):
		""" return the ESSI node object """

		FileId = self.__getNodeFileName(NodeId);

		if(FileId==-1):
			return None;
		else:
			return ESSInode.ESSI_Node(NodeId,self.__HDF5_File );

	def Element(self,ElementId):
		""" return the ESSI element object """

		FileId = self.__getElementFileName(ElementId);

		if(FileId==-1):
			return None;
		else:
			return ESSIelement.ESSI_Element(ElementId,self.__HDF5_File );

	def Time(self):
		""" return the ESSI time object """

		return ESSItime.ESSI_Time(self.__HDF5_File );


# filename = 'Beam_Axial_Load.h5.feioutput';
# X = ESSI_Output(filename);
# print X;
# print X.Node(1);
# print X.Element(1);
# print X.Time()

# filename = 'NPPModel_DRM_Motion.h5.feioutput';
# X = ESSIoutput(filename);
# print X;
# X.GaussInfo();



